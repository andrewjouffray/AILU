'''
     _             _             ___       _   _              _                                    _
    /_\  _ __   __| |_ __ ___   / __\ ___ | |_(_) ___ ___    /_\  _   _  __ _ _ __ ___   ___ _ __ | |_ ___ _ __
  //_\\| '_ \ / _` | '__/ _ \ /__\/// _ \| __| |/ __/ __|  //_\\| | | |/ _` | '_ ` _ \ / _ \ '_ \| __/ _ \ '__|
/  _  \ | | | (_| | | | (_) / \/  \ (_) | |_| | (__\__ \ /  _  \ |_| | (_| | | | | | |  __/ | | | ||  __/ |
\_/ \_/_| |_|\__,_|_|  \___/\_____/\___/ \__|_|\___|___/ \_/ \_/\__,_|\__, |_| |_| |_|\___|_| |_|\__\___|_|
                                                                      |___/

This is the main file

input: directory containing processed video files from the robot, output directory.

step1: load the video file
step2: for each frame in the video, get the object of interest
step3: create a specified number of canvases with this object
step4: save those canvases in a specified folder along with data about the objects in a separate XML file
step5: repeat until there are no more video files

output: Large number of random training data

'''

import os
import sys
sys.path.insert(1, '../.')
import time
import ailu_python.utils.tmp as func
import cv2
from augment_files.canvas import Canvas
import augment_files.save_file as save_file
import random
import ailu_python.utils.display as display
import argparse

# Initiate argument parser
parser = argparse.ArgumentParser(
    description="Supermodel Neural Network Generator")
parser.add_argument("-a",
                    "--ailu_input",
                    help="Path to the folder where the input .avi or .pm4 files generated by AILU are stored.",
                    type=str)

parser.add_argument("-d",
                    "--dataset_name",
                    help="The name you want for your dataset.",
                    type=str)

parser.add_argument("-w",
                    "--working_directory",
                    help="The directory containing /bckgrnd/ /Tensorflow/ and /datasets/.",
                    type=str)

args = parser.parse_args()

WORKING_DIR = args.working_directory+"/"

# writes the pbtxt label map
def writeLabelMap(datasetName, labels):

    destination = WORKING_DIR+"datasets/"+datasetName+"/annotation/label_map.pbtxt"
    file1 = open(destination, "a")  # append mode 
    i = 1
    last = ""
    for name in labels:
        if name != last:
            last = name
            file1.write("item { \n    id: "+str(i)+"\n    name: \'"+name+"\'\n} \n")
            i += 1

    file1.close()





# checks the background files and makes sure that they are valid to be used with the program
def loadBackgrounds(path):
    try:
        print("> Loading background images...")
        files = os.listdir(path)
        validFiles = []
        print("> Checking files...")
        for file in files:
            if file.endswith(".jpg"):
                validFiles.append(path+ file)
        if len(validFiles) == 0:
            raise Exception("no valid files in directory")
        print("> Background successfully loaded", len(validFiles), "images")
    except Exception as e:
        print("> Failed to load background images")
        print("> Error:", e)
        return False

    return validFiles

# checks the path provided by the user to make sure that it has .avi files in it
def loadInput(path):
    try:
        print("> Loading input videos files...")
        dirs = os.listdir(path)
        validFiles = []
        validDir = []
        labels = []
        print("> Checking files...")
        for directory in dirs:
            print("> Label:", directory)
            files = os.listdir(path+"/"+directory)
            for singleFile in files:
                if singleFile.endswith(".avi") or singleFile.endswith(".mp4"):
                    validDir.append(path+directory+"/")
                    validFiles.append(singleFile)
                    labels.append(directory)
        if len(validFiles) == 0:
            raise Exception("no valid files in directory")
        print("> Background successfully loaded", len(validFiles), "videos files")
    except Exception as e:
        print("> Failed to load videos files")
        print("> Error:", e)
        return False

    return validFiles,validDir,labels

# gets the object of interest out of the input video frame
def getOoi(frame):
    rois_img = func.getAllRoiImage(frame)
    if rois_img[0] is None:
        print("> Error: rois[0] is None")
        return False
    if rois_img[0].any() < 1 and len(rois_img) > 2:
        rois_img[0] = rois_img[1]
    elif rois_img[0].any() < 1:
        return False
    return rois_img[0]

def getRandomBackground(backgrounds):
    background_image_filename = backgrounds[random.randint(0, len(backgrounds) - 1)]

    background_image = cv2.imread(background_image_filename)
    while background_image is None:
        background_image_filename = backgrounds[random.randint(0, len(backgrounds) - 1)]
        background_image = cv2.imread(background_image_filename)

    return background_image


def main():

    # canvas is just a black image that serves as the background before a random background can be added
    PATH_TO_CANVAS = "./augment_files/canvas.png"
    datasetName = args.dataset_name

    print("=======================================================================================================================================================")

    # gets input path
    while True:
        inputPath = args.ailu_input
        if not inputPath.endswith("/"):
            inputPath = inputPath+"/"
        if os.path.exists(inputPath):
            videoFiles, dirs, labels = loadInput(inputPath)
            if videoFiles:
                print("> Dataset name:",datasetName)
                break
        elif inputPath.lower() == "exit":
            exit()
        else:
            print("> Error: input path not found", inputPath)
            exit()

    # gets output path
    while True:
        outPutPath = WORKING_DIR+"datasets/"+datasetName+"/"
        os.mkdir(outPutPath)
        print("> Created path", outPutPath)
        break

    if not os.path.exists(outPutPath+"training/"):
        training = outPutPath+"training/"
        os.mkdir(training)
        print("> Created training directory")

    if not os.path.exists(outPutPath+"validation/"):
        validation = outPutPath+"validation/"
        os.mkdir(validation)
        print("> Created validation directory")

    if not os.path.exists(outPutPath+"annotaion"):
        annotation = outPutPath+"annotation/"
        os.mkdir(annotation)
        print("> Created annotation directory")
    
    # create training paths
    if not os.path.exists(training+"images/"):
        os.mkdir(training+"images/")
        print("> Created path", training+"images/")

    if not os.path.exists(training+"masks/"):
        os.mkdir(training+"masks/")
        print("> Created path", training+"masks/")

    if not os.path.exists(training+"xml/"):
        os.mkdir(training+"xml/")
        print("> Created path", training+"xml/")
    
    # create validation paths
    if not os.path.exists(validation+"images/"):
        os.mkdir(validation+"images/")
        print("> Created path", validation+"images/")

    if not os.path.exists(validation+"masks/"):
        os.mkdir(validation+"masks/")
        print("> Created path", validation+"masks/")

    if not os.path.exists(validation+"xml/"):
        os.mkdir(validation+"xml/")
        print("> Created path", validation+"xml/")


    # gets the path to the background images
    backgroundPath = WORKING_DIR + "bckgrnd/"
    backgrounds = loadBackgrounds(backgroundPath)
    #label = input("\n> Enter the label of the objects: ")

    # gets the number of canvases created from one frame
    numberOfCanvases = 5

    # gets the number of objects that can be put on a canvas
    maxOoi = 6

    # those variables are just here to keep track of how many images were processed
    imageCount = 0
    addedTotal = 0
    i = 0

    # writes the label map to /DatasetName/annotation
    writeLabelMap(datasetName, labels)
    print("> Wrote the label map...")
    # iterates through the .avi files in the input directory
    for directory in dirs:
        label = labels[i]
        for file in os.listdir(directory):

            print("\n\n=======================================================================================================================================================")
            start = time.time()

            # opens the .avi file
            cap = cv2.VideoCapture(directory+file)
            print("> Processing file:",directory+file)
            print("> Label: ", label)
            # while the video file in opened
            loop = 0
            while cap.isOpened():

                # get the frame
                ret, frame = cap.read()

                # if there is a frame
                if ret == True:
                    # extract the object of interest out of it
                    ooi = getOoi(frame)
                    # if getOoi isn't able to obtain an object of interest, it will just return False
                    if not type(ooi) == bool:

                        # creates the specified amounts of canvases for this object of interest
                        for i in range(numberOfCanvases):
                            imageCount += 1
                            canvas1 = 0

                            loop +=1
                            marker = chr(9608)
                            for i in range(loop):
                                marker += chr(9608)
                            print("> Generated images: ",str(imageCount), end="\r")
                            print(marker, end="\r")

                            if loop == 100:
                                loop = 0
                                marker = chr(9608)
                                print("> Generated images:", str(imageCount), end="\r")
                                print("                                                                                                                                 ", end="\r")

                            # creates a canvas with the ooi
                            backgrnd = getRandomBackground(backgrounds)
                            canvas1 = Canvas(ooi,PATH_TO_CANVAS,backgrnd, maxOoi)
                            

                            # creates a 1/5 chance to get a lower res image and a 1/10 chance to get a blurry image
                            if random.randint(1, 5) == 1:
                                canvas1.lowerRes()

                            # creates a 1/10 chance to add blur to the image
                            else:
                                if random.randint(1, 10) == 1:
                                    canvas1.blur()
                        
                            if random.randint(1, 4) == 1:
                                canvas1.changeGamma()

                            if random.randint(1, 15) == 1:
                                canvas1.tint()

                            # gets the image from the canvas
                            image = canvas1.getCanvas()

                            # gets the mask from the canvas
                            mask = canvas1.getMask()



                            if canvas1.getRois() == [[0,0,0,0]]:
                                pass
                            else:

                                if loop % 10 == 0:
                                    # saves them along with an xml file containing the object positions
                                    save_file.save_images(image, canvas1.getRois(), validation, label, mask)
                                else:

                                     save_file.save_images(image, canvas1.getRois(), training, label, mask)

                        
                            canvas1 = 0


                            '''
                            maybe we could simulate shadows by increasing the brightness value in hsv images which will loop
                            back around and make bright stops dark again, and therefore we could make it able to work in
                            sunlight
                                               
                            '''

                        # print out a report on the amount of time it took to create the image
                        # print(str(imageCount) + " / "+ str(400 * len(videoFiles) * numberOfCanvases) +" images generated | " + str(round(total, 5)) + " seconds per images | average: " + str(round(average, 5)) + " seconds.", end="\r")

                        # Uncomment below to see what the images look like

                        #display.draw_and_show(mask, canvas1.getRois(), "mask")
                        #display.draw_and_show(image, canvas1.getRois(), "canvas")
                        #if cv2.waitKey(25) & 0xFF == ord('q'):
                        #    print("\n> Exiting...")
                        #    exit()
                        #time.sleep(0.5)
                else:
                    break

            end = time.time()
            total = end - start
            addedTotal = addedTotal + total
            average = addedTotal / imageCount
            print("\n> Average process speed: ", average, "sec.")



if __name__ == "__main__":
    main()







